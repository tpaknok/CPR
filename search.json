[{"path":[]},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement tpaknok@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tpaknok.github.io/CPR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://tpaknok.github.io/CPR/articles/Advanced_uses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Complex models and manual priors","text":"INLA conducts Bayesian analyses, users must specify priors different parameters, least need accept default values. Generally, mixed model, users must consider priors fixed effects, random effects, well distributions. , demonstrate manually specify prios include random effects CPR models. let’s load data first.","code":"library(phytools) #> Loading required package: ape #> Loading required package: maps library(tidyverse) #> ── Attaching core tidyverse packages ─────────────────────────────────────────────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.0     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2 #> ── Conflicts ───────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ✖ purrr::map()    masks maps::map() #> ✖ dplyr::where()  masks ape::where() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(CPR) #> Loading required package: Matrix #>  #> Attaching package: 'Matrix' #>  #> The following objects are masked from 'package:tidyr': #>  #>     expand, pack, unpack data(\"KSR\") data(\"KSR_MLtree\") data(\"KSR_EF\")  VCV_sp <- vcv(KSR_MLtree) #species level phyologenetic covariance matrix using default (Brownian) model VCV_sp <- VCV_sp[order(rownames(VCV_sp)),order(colnames(VCV_sp))] VCV_comm <- get_comm_pair_r(KSR,VCV_sp) #> Loading required package: matrixcalc"},{"path":"https://tpaknok.github.io/CPR/articles/Advanced_uses.html","id":"complex-models","dir":"Articles","previous_headings":"","what":"Complex Models","title":"Complex models and manual priors","text":"Imagine BEF experiment KSR blocked design (doesn’t), add one column “block” data. Theoretically, blocking structure addressed adding random intercept. popular package lme4 glmmTMB, use (1|block) represent random intercept. Generally, might wish control structures data, spatial temporal structures. INLA capable handling , please refer INLA resources need . Now let’s generate fake blcoking structure.","code":"KSR_EF$block <- sample(1:7,88,replace=T)"},{"path":"https://tpaknok.github.io/CPR/articles/Advanced_uses.html","id":"running-the-model","dir":"Articles","previous_headings":"","what":"Running the Model","title":"Complex models and manual priors","text":"run model phylogenetic spatial (block) random effects, just run following. , however, use default priors everything. look prior specifications. Note INLA uses precision instead variance. Run functions examine priors actually used model.","code":"inla_m <- CPR(formula = LAI~Real.rich+                  f(comm,model=\"generic0\",Cmatrix=Phylo)+                  f(block,model=\"iid\"),                priors=NULL,                df = KSR_EF,                VCV_sp = VCV_sp,                comm=KSR,                family=\"gaussian\",                optim.lambda = T) inla_m$best_model$.args$control.fixed #gaussian distribution, original scale inla_m$best_model$.args$control.family[[1]]$hyper$theta1 #hyperparameter inla_m$best_model$all.hyper$random[[1]]$hyper$theta$prior #hyperparameter inla_m$best_model$all.hyper$random[[1]]$hyper$theta$param #hyperparameter inla_m$best_model$all.hyper$random[[2]]$hyper$theta$prior #hyperparameter inla_m$best_model$all.hyper$random[[2]]$hyper$theta$param #hyperparameter"},{"path":"https://tpaknok.github.io/CPR/articles/Advanced_uses.html","id":"internal-calculations-of-inla","dir":"Articles","previous_headings":"","what":"Internal Calculations of INLA","title":"Complex models and manual priors","text":"Apart fixed effects, uses gaussian distribution, parameters estimated using logGamma distribution. internal calculations conducted log scale back-transforming original scale. Therefore, priors must specificed log scale . can use inla.doc() check internal calculations different distributions priors. gaussian distribution, use inla.doc(“Gaussian”). Note log-transformed hyperparameters follow logGamma(,b), original hyperparameters follow Gamma(,b). Read inla.doc(“Gamma”) learn ! can use functions get sense prior looks like. prior slope estimates","code":"plot(density(rnorm(1000,0,sqrt(1/0.001))))"},{"path":"https://tpaknok.github.io/CPR/articles/Advanced_uses.html","id":"using-manual-priors","dir":"Articles","previous_headings":"","what":"Using Manual Priors","title":"Complex models and manual priors","text":"Let’s say don’t like priors want change bit. create different objects storing priors. Note just demonstrating manually specify priors run CPR, thought process construct meaningful priors. just put priors different arguments. Notet blocking random effects, still use default one. need specify manual prior . example, want use default prior block, just use list(prior.phy=prior). Note name priors shouldn’t contain word “Phylo” - designated hold communtiy phylogenetic covariance matrix. name prior word “Phylo”, error occur. Now check priors !","code":"prior.fixed <- list(prec.intercept = 0.001,prec = 0.005) prior.family <-  list(hyper=list(theta1 = list(prior=\"loggamma\",param = c(1,4e-5)))) prior.phy <- list(prec=list(prior=\"loggamma\",param=c(0.1,0.1))) prior.block <- list(prec=list(prior=\"loggamma\",param=c(1,4e-5))) inla_m2 <- CPR(formula = LAI~Real.rich+                  f(comm,model=\"generic0\",Cmatrix=Phylo,hyper=prior.phy)+                  f(block,model=\"iid\"),               priors=list(prior.phy=prior.phy,prior.block=prior.block),               df = KSR_EF,               VCV_sp = VCV_sp,               comm=KSR,               family=\"gaussian\",               optim.lambda = T,               control.fixed = prior.fixed,               control.family = prior.family) inla_m2$best_model$.args$control.fixed #gaussian distribution, original scale inla_m2$best_model$.args$control.family[[1]]$hyper$theta1 #hyperparameter inla_m2$best_model$all.hyper$random[[1]]$hyper$theta$prior #hyperparameter inla_m2$best_model$all.hyper$random[[1]]$hyper$theta$param #hyperparameter inla_m2$best_model$all.hyper$random[[2]]$hyper$theta$prior #hyperparameter inla_m2$best_model$all.hyper$random[[2]]$hyper$theta$param #hyperparameter"},{"path":"https://tpaknok.github.io/CPR/articles/Advanced_uses.html","id":"notes-on-priors","dir":"Articles","previous_headings":"","what":"Notes on Priors","title":"Complex models and manual priors","text":"specify priors? Well lot debates encouraged visit literature. choose use default ones, understand values . Many studies prefer using non-informative priors minimize influences results (.e., results strongly driven data instead priors), also good reasons use informative priors, especially sample size low. fact one major advantage Bayesian analyses! Note default priors always non-informative! example, specify fixed effect priors , might non-informative standardized responses predictors, given biological relationships rarely strong (like increasing responses 1 SD predictors increase 1 SD). However, run analyses original scale, becomes tricky, slope can change according unit responses predictors. example, body mass increases 0.01kg per unit temperature, converting unit g completely change magnitude slope (.e, 10gram)!","code":""},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_multiple.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Empirical Analyses with CPR - Multiple Functions","text":"Assuming multiple ecosystem functions analyse, can repeat code single ecosystem function analyses multiple times. bit annoying though, especially lot data! , provide example use loop . First, load data .","code":"library(phytools) library(tidyverse) library(CPR) library(INLA) data(\"KSR\") data(\"KSR_MLtree\") data(\"KSR_EF\") VCV_sp <- vcv(KSR_MLtree) #species level phyologenetic covariance matrix using default (Brownian) model VCV_sp <- VCV_sp[order(rownames(VCV_sp)),order(colnames(VCV_sp))] VCV_comm <- get_comm_pair_r(KSR,VCV_sp)"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_multiple.html","id":"data-explorations","dir":"Articles","previous_headings":"","what":"Data Explorations","title":"Empirical Analyses with CPR - Multiple Functions","text":"use lapply . ten ecosystem functions, different statistical properties. examples, arthropod abundance must integer, damage reduction effects continuous. visualize distributions different ecosystem functions, can see spike zero! Histograms LAI Histograms floral abundance Thus, use different distributions different ecosystem functions. example, use negative binomial integer data, zeroinflated negative binomial integer data many zeros. continuous data, can use normal distribution, tweedie distribution many zeroes. need create lists store different formulas, name distribution, priors different models. Let’s . inla.set.contro.family.default indicates use default priors hyperparameters. However, tweedie distribution, specified non-informative prior.","code":"plot(hist(KSR_EF$LAI)) plot(hist(KSR_EF$flwr_total))"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_multiple.html","id":"model-setups","dir":"Articles","previous_headings":"","what":"Model Setups","title":"Empirical Analyses with CPR - Multiple Functions","text":"can simply use lapply loop everything. take time run!!!","code":"y <- c(\"poll_total\",        \"bugs\",        \"bug.rich\",        \"litter2012\",        \"ave.biomass\",        \"flwr_total\",        \"Mass.loss.2month\",        \"LAI\",        \"mean.N.change\",        \"Damage_effect\") #response  x <- \"Real.rich\" # predictors re <- 'f(comm,model=\"generic0\",Cmatrix=Phylo)' #random effect  family <- list(\"zeroinflatednbinomial1\",             \"nbinomial\",             \"nbinomial\",             \"gaussian\",             \"gaussian\",             \"tweedie\",             \"gaussian\",             \"gaussian\",             \"gaussian\",             \"gaussian\") #family for each response  formulas <- lapply(paste0(y,\"~\",x,\"+\",re),function(x) as.formula(x))  control.family<- list(inla.set.control.family.default(\"zeroinflatednbinomial1\"),                       inla.set.control.family.default(\"nbinomial\"),                       inla.set.control.family.default(\"nbinomial\"),                       inla.set.control.family.default(\"gaussian\"),                       inla.set.control.family.default(\"gaussian\"),                        list(hyper = list(                          theta1 = list(initial = 0),                          theta2 = list(initial = 0,                                        prior = \"loggamma\",                                        param = c(0.1,0.1)))),                       inla.set.control.family.default(\"gaussian\"),                       inla.set.control.family.default(\"gaussian\"),                       inla.set.control.family.default(\"gaussian\"),                       inla.set.control.family.default(\"gaussian\")) #hyperparameter priors  KSR_EF_list <- lapply(1:10,function(x) KSR_EF) #create ten sets of KSR_EF data comm_list <- lapply(1:10, function(x) KSR) #ten sets of comm data  KSR_EF_list[[10]] <- subset(KSR_EF_list[[10]], Real.rich > 1) #for damage effect, we exclude monoculture communities comm_list[[10]] <- KSR[rowSums(KSR) >1,] #for damage effect, we exclude monoculture communities"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_multiple.html","id":"empirical-analyses---multiple-functions","dir":"Articles","previous_headings":"","what":"Empirical Analyses - Multiple Functions","title":"Empirical Analyses with CPR - Multiple Functions","text":"","code":"BEF_KSR <- lapply(1:length(family), function(x) CPR(formulas[[x]],                                                     priors=NULL,                                                     df = KSR_EF_list[[x]],                                                     VCV_sp = VCV_sp,                                                     comm=comm_list[[x]],                                                     family=family[[x]],                                                     control.family=control.family[[x]],                                                     inla.rerun=3,                                                     optim.lambda = T))"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_multiple.html","id":"visualizations","dir":"Articles","previous_headings":"","what":"Visualizations","title":"Empirical Analyses with CPR - Multiple Functions","text":"visualize expected effect species richness different ecosystem functions, need extract predictions model. make figure, also need restructure KSR_EF wide format long format. Also, flower abundance ranged 0-60000, presented findings log-scale (although analyses log transform , tweedie use log link). Now just ggplot2 code, figure Tsang et al. (2024) produced. Predicted effects species richness ten selected ecosystem functions","code":"all_predictions <- do.call(rbind,sapply(1:10, function(x) BEF_KSR[[x]]$prediction)) plot_data <- KSR_EF %>%   select(any_of(y)|\"Real.rich\") %>%   pivot_longer(!Real.rich,names_to=\"response\")  plot_data$value[plot_data$response == \"flwr_total\"] <- log(plot_data$value[plot_data$response == \"flwr_total\"]+1) all_predictions[all_predictions$response == \"flwr_total\",c(\"0.5quant\",\"0.025quant\",\"0.975quant\")] <- log(all_predictions[all_predictions$response == \"flwr_total\",c(\"0.5quant\",\"0.025quant\",\"0.975quant\")]+1) library(ggplot2) p <- ggplot(data=all_predictions)+   geom_jitter(data=plot_data,aes(y=value,x=Real.rich),width=0)+   geom_line(aes(y=`0.5quant`,x=Real.rich,colour=model,linetype=Sig))+   geom_ribbon(aes(y=`0.5quant`,x=Real.rich,fill=model,ymin=`0.025quant`,ymax=`0.975quant`),alpha=0.3,colour=\"transparent\")+   facet_wrap(~response,scales=\"free\",nrow=5,ncol=2)+   theme_classic()+   labs(x=\"Species richness\",y=\"Ecosystem function\",colour=\"Model\",fill=\"Model\",linetype=\"Significance\")+   scale_linetype_manual(values=c(2,1))+   scale_colour_manual(values=c(\"#000000\",\"#E69F00\"))+   scale_fill_manual(values=c(\"#000000\",\"#E69F00\"))+   theme(legend.position=\"bottom\")  plot(p)"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_single.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Empirical Analyses with CPR - Single Function","text":"R Markdown document describing use CPR conduct BEF regression, community-level analyses. need install load multiple packages data. Let’s get variane covariance matrix species community level. KSR_EF data multiple ecosystem function.","code":"library(phytools) library(tidyverse) library(CPR) data(\"KSR\") data(\"KSR_MLtree\") data(\"KSR_EF\") VCV_sp <- vcv(KSR_MLtree) #species level phyologenetic covariance matrix using default (Brownian) model VCV_sp <- VCV_sp[order(rownames(VCV_sp)),order(colnames(VCV_sp))] VCV_comm <- get_comm_pair_r(KSR,VCV_sp) VCV_comm[1:5,1:5] #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 1.0000000 0.7031681 0.5639611 0.5601336 0.7539047 #> [2,] 0.7031681 1.0000000 0.5458038 0.5420995 0.7048548 #> [3,] 0.5639611 0.5458038 1.0000000 0.9932127 0.5749535 #> [4,] 0.5601336 0.5420995 0.9932127 1.0000000 0.5710514 #> [5,] 0.7539047 0.7048548 0.5749535 0.5710514 1.0000000 head(KSR_EF) #>   Plot Real.rich litter2012 ave.biomass  LAI mean.N.change poll_total flwr_total Mass.loss.2month Damage_effect bugs bug.rich #> 1   X2         1      79.05    32.97333 1.67       -0.0015         20 43113.5000            3.362     0.0000000    9        7 #> 2   X3         4      74.23    82.41000 5.53       -0.0275         53  2126.1429            3.718     0.3001195    7        6 #> 3   X4         2      34.50    62.92667 3.04        0.0060        150   324.4286            3.521     0.4195279    4        2 #> 4   X7         1      36.32    34.38333 3.42       -0.0575          0     0.0000            3.328     0.0000000    5        3 #> 5   X8         3      21.46   147.05667 7.14       -0.0070          0     0.0000            3.608     2.7460093    4        4 #> 6   X9         1      37.26    33.80333 1.01        0.0415          0     0.0000            3.627     0.0000000   11        7"},{"path":[]},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_single.html","id":"empirical-analyses---single-function","dir":"Articles","previous_headings":"","what":"Empirical Analyses - Single Function","title":"Empirical Analyses with CPR - Single Function","text":"repeated analyses Cadotte et al. (2017), involving ten ecosystem functions. one ecosystem function interest (don’t mind code clunky), can just use INLA write similar functions ten times. example, let’s analyze flower abundance. INLA powerful package, can bit complicated use. Bayesian analysis, specify priors. INLA different default priors check website interested. simplicty’s sake, use default prior random fixed effects, uninformative case. However, dispersion parameter tweedie, actually used gaussian distribution N~(0,2). Note prior log-scale internal calculation INLA. ’s default setting loggamma (100,100) seems narrow range, thus becoming informative, least dataset. Generally, think carefully prior constructions. Default priors always uninformative, can huge influence data! syntax INLA different packages like lme4 glmmTMB. random effect, need use f() provide necessary argument. manually computed covariance matrix, need first convert precision matrix, throw Cmatrix argument. Also, need set model “generic0”. use CPR, need supply species-level covariance matrix VCV_sp, add “Phylo” Cmatrix argument. Phylo just placeholder internal calculation CPR automatically convert covariance matrix precision matrix (even optimize covariance matrix wish ). also need add ID plot, CPR function internally create column named “comm” automatically. INLA sometimes might fail run, rerun automatically. don’t need worry . choose optimize phylogenetic signal, might take run! patient!","code":"inla_m <- CPR(formula = bugs~Real.rich+f(comm,model=\"generic0\",Cmatrix=Phylo),               priors=NULL,               df = KSR_EF,               VCV_sp = VCV_sp,               comm=KSR,               family=\"nbinomial\",               optim.lambda = T)  summary(inla_m$best_model) #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \", \" data = data, quantiles = quantiles, E =  #>    E, offset = offset, \", \" scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \", \" lp.scale =  #>    lp.scale, link.covariates = link.covariates, verbose = verbose, \", \" lincomb = lincomb, selection = selection,  #>    control.compute = control.compute, \", \" control.predictor = control.predictor, control.family = control.family, \", \"  #>    control.inla = control.inla, control.fixed = control.fixed, \", \" control.mode = control.mode, control.expert =  #>    control.expert, \", \" control.hazard = control.hazard, control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \" control.pardiso = control.pardiso, only.hyperparam =  #>    only.hyperparam, \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads = num.threads, \", \" keep = keep,  #>    working.directory = working.directory, silent = silent, \", \" inla.mode = inla.mode, safe = FALSE, debug = debug,  #>    .parent.frame = .parent.frame)\" )  #> Time used: #>     Pre = 0.2, Running = 0.244, Post = 0.133, Total = 0.577  #> Fixed effects: #>              mean    sd 0.025quant 0.5quant 0.975quant  mode kld #> (Intercept) 2.156 0.312      1.516    2.165      2.746 2.165   0 #> Real.rich   0.080 0.096     -0.109    0.080      0.270 0.080   0 #>  #> Random effects: #>   Name     Model #>     comm Generic0 model #>  #> Model hyperparameters: #>                                                        mean    sd 0.025quant 0.5quant 0.975quant mode #> size for the nbinomial observations (1/overdispersion) 2.54 0.514      1.678     2.49       3.69 2.39 #> Precision for comm                                     2.84 1.497      0.948     2.51       6.66 1.96 #>  #> Watanabe-Akaike information criterion (WAIC) ...: 617.44 #> Effective number of parameters .................: 11.93 #>  #> Marginal log-Likelihood:  -868.48  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_single.html","id":"residual-checking","dir":"Articles","previous_headings":"","what":"Residual Checking","title":"Empirical Analyses with CPR - Single Function","text":"Let’s model diagnostics make sure model makes sense. First, use function INLA_simulate obtain simulated response model. put DHARMa conduct different diagnostics. Outputs DHARMa negative binomial model can see data don’t deviate lot expected line QQ plot, good thing. Also, obvious pattern residual graph….model ok.","code":"library(DHARMa) sres <- INLA_simulate(inla_m$best_model) DHARMa_res <- createDHARMa(sres,                            KSR_EF$bugs,                            fittedPredictedResponse=inla_m$predictedfittedresponse,                            integerResponse = T) plot(DHARMa_res,quantreg=F)"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_single.html","id":"a-bad-example","dir":"Articles","previous_headings":"","what":"A Bad Example","title":"Empirical Analyses with CPR - Single Function","text":"Now let’s try run analyses poisson distribution see happens. hyperparameter poisson distribution use default settings INLA. Outputs DHARMa poisson model Clearly worse fit negative binomial! know poisson distributions often fail describe ecological data properly. functions DHARMa, check package build robust models!","code":"inla_m2 <- CPR(formula = bugs~Real.rich+f(comm,model=\"generic0\",Cmatrix=Phylo),               priors=NULL,               df = KSR_EF,               VCV_sp = VCV_sp,               comm=KSR,               family=\"poisson\")  summary(inla_m2$best_model) #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \", \" data = data, quantiles = quantiles, E =  #>    E, offset = offset, \", \" scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \", \" lp.scale =  #>    lp.scale, link.covariates = link.covariates, verbose = verbose, \", \" lincomb = lincomb, selection = selection,  #>    control.compute = control.compute, \", \" control.predictor = control.predictor, control.family = control.family, \", \"  #>    control.inla = control.inla, control.fixed = control.fixed, \", \" control.mode = control.mode, control.expert =  #>    control.expert, \", \" control.hazard = control.hazard, control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \" control.pardiso = control.pardiso, only.hyperparam =  #>    only.hyperparam, \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads = num.threads, \", \" keep = keep,  #>    working.directory = working.directory, silent = silent, \", \" inla.mode = inla.mode, safe = FALSE, debug = debug,  #>    .parent.frame = .parent.frame)\" )  #> Time used: #>     Pre = 0.229, Running = 0.198, Post = 0.0576, Total = 0.484  #> Fixed effects: #>              mean    sd 0.025quant 0.5quant 0.975quant  mode kld #> (Intercept) 2.071 0.234      1.598    2.075      2.518 2.075   0 #> Real.rich   0.025 0.065     -0.105    0.026      0.151 0.026   0 #>  #> Random effects: #>   Name     Model #>     comm Generic0 model #>  #> Model hyperparameters: #>                    mean    sd 0.025quant 0.5quant 0.975quant mode #> Precision for comm 1.97 0.753      0.808     1.87       3.72 1.67 #>  #> Watanabe-Akaike information criterion (WAIC) ...: 872.94 #> Effective number of parameters .................: 69.07 #>  #> Marginal log-Likelihood:  -975.55  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')  sres2 <- INLA_simulate(inla_m2$best_model) DHARMa_res2 <- createDHARMa(sres2,                            KSR_EF$bugs,                            inla_m2$predictedfittedresponse,                            integerResponse=T) plot(DHARMa_res2,quantreg=F)"},{"path":"https://tpaknok.github.io/CPR/articles/Empirical_single.html","id":"making-figures","dir":"Articles","previous_headings":"","what":"Making figures","title":"Empirical Analyses with CPR - Single Function","text":"Let’s say want visualize predicted relationships arthropod abundance species richness. Note predict functions doesn’t work INLA, many packages don’t support INLA . use CPR, result automatically provide predicted relationships can pass ggplot make pretty figures. variable, CPR create list. Thus example can extract predicted relationship inla_m$prediction$Real.rich want visualize expected effect species richness. course can just visualize effect /without phylogeny, depending one fits better. Anyway, based models, found evidence arthropod abundance varied across different treatments. Predicted effects species richness arthropod abundance","code":"library(ggplot2)  p <- ggplot()+   geom_point(data=KSR_EF,aes(x=Real.rich,y=bugs))+   geom_line(data=inla_m$prediction$Real.rich,aes(x=Real.rich,                                                  y=`0.5quant`,                                                  colour=model,                                                  ),linetype=2)+   geom_ribbon(data=inla_m$prediction$Real.rich,aes(x=Real.rich,                                                    y=`0.5quant`,                                                    ymin=`0.025quant`,                                                    ymax=`0.975quant`,                                                    fill=model,                                                    ),alpha=0.3)+   scale_colour_manual(values=c(\"#000000\",\"#E69F00\"))+   scale_fill_manual(values=c(\"#000000\",\"#E69F00\"))+   labs(x=\"Species richness\",y = \"Arthropod abundance\",fill=\"Model\",colour=\"Model\")+   theme_classic()+   theme(legend.position=\"bottom\")  plot(p)"},{"path":"https://tpaknok.github.io/CPR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Toby Pak Nok Tsang. Maintainer.","code":""},{"path":"https://tpaknok.github.io/CPR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tsang TPN (2024). CPR: Community Phylogenetic Regression. R package version 0.1.0, https://tpaknok.github.io/CPR/, https://github.com/tpaknok/CPR.","code":"@Manual{,   title = {CPR: Community Phylogenetic Regression},   author = {Toby Pak Nok Tsang},   year = {2024},   note = {R package version 0.1.0, https://tpaknok.github.io/CPR/},   url = {https://github.com/tpaknok/CPR}, }"},{"path":"https://tpaknok.github.io/CPR/index.html","id":"cpr-","dir":"","previous_headings":"","what":"Community Phylogenetic Regression","title":"Community Phylogenetic Regression","text":"CPR addresses phylogenetic non-independence species community analyses.","code":""},{"path":"https://tpaknok.github.io/CPR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Community Phylogenetic Regression","text":"can install development version CPR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tpaknok/CPR\")"},{"path":"https://tpaknok.github.io/CPR/index.html","id":"main-function","dir":"","previous_headings":"","what":"Main function","title":"Community Phylogenetic Regression","text":"main function package CPR, conducts Bayesian phylogenetic GLMM using INLA. Briefly, function automatically constructs phylogenetic covariance matrix communities based composition evolutionary history species. Read vignette start.","code":""},{"path":"https://tpaknok.github.io/CPR/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Community Phylogenetic Regression","text":"many ecological analyses, obtained different metrics community levels analyzed using LM/GLM. Nevertheless, assumes statistical independence communities. Species however independent, given shared evolutionary history. Indeed, many comparative analyses (e.g., correlating different traits), shared evolutionary history species controlled using Generalized Least Square Regression Generalized Linear Mixed Model. functions CPR help users control phylogenetic non-independence communities without intensive coding. Users need 1) species composition community 2) phylogenetic tree including species community data.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulating a BEF relationship — BEF_simulate","title":"Simulating a BEF relationship — BEF_simulate","text":"Simulating BEF relationship /without phylogenetic signals. Broadly, can also used simulate relationship phyloogenetic signals.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulating a BEF relationship — BEF_simulate","text":"","code":"BEF_simulate(comm,              V,              ef_mean,              sd,              b1 = 0,              signals_X = \"sr\",              signals_intercept = TRUE,              signals_slope = FALSE,              lambda_true = 1,              sim = 500,              seed=1000)"},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulating a BEF relationship — BEF_simulate","text":"comm species-site matrix. V phylogenetic covariance matrix species levels. ef_mean mean value simulated per-capita effect Y species. default zero. Used signals_X = \"phy_cor\" (see Details) sd standard deviation simulated per-capita effect Y species. default one. Used signals_X = \"phy_cor\" (see Details) b1 value b1, effect X Y. signals_X Type X simulated used. signals_X = \"sr\", species richness used. signals_X = \"phy_cor\", continuous variable phylogenetic signals generated. signals_X = \"no_phy_cor\", continuous variable without phylogenetic signals (\\(N(0,1)\\)) generated. default \"sr\". signals_intercept Phylogenetic signals intercept community. default TRUE. signals_slope Phylogenetic signals slope community. default FALSE. lambda_true Lambda used simulating data. default 1. Ignored signals_intecept signals_slope FALSE. sim Number simulations. default 500. seed seed used simulate data. default 1000.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulating a BEF relationship — BEF_simulate","text":"simulated relationship $$Y = (b_{0}+Z_{1,comm})+(b_{1}+Z_{0,comm})X$$ \\(b_{0}\\) population-level intercept, \\(b_{1}\\) poluation-level effect \\(X\\), \\(Z_{0,comm}\\) random intercept community, \\(Z_{1,comm}\\) random slope community. signals_intercept signals_slope FALSE, random effects zero. signals_X = \"phy_cor\", X $$chol({C_{comm})U}$$ $$U ~ Gaussian(ef\\_ mean,sd)$$ \\(U\\) data vector randomly sampled Normal distirbution, \\(chol({C_{comm})}\\) upper triangular Cholesky decomposition phylogenetic covariance matrix community levels. also way random intercepts slopes generated","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulating a BEF relationship — BEF_simulate","text":"list data frames length equals number simulation. data frames contained two columns X Y.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulating a BEF relationship — BEF_simulate","text":"Toby P.N. Tsang","code":""},{"path":[]},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulating a BEF relationship — BEF_simulate","text":"","code":"library(phytools) library(tidyverse) library(CPR) data(KSR) data(KSR_MLtree) data(KSR_EF)  VCV_sp <- vcv(KSR_MLtree)  sim_data_lambda_1 <- BEF_simulate(comm = KSR,                                   V = VCV_sp,                                   ef_mean = 0,                                   sd = 1,                                   b1 = 0,                                   signals_X = \"sr\",                                   signals_intercept = TRUE,                                   signals_slope = FALSE,                                   lambda_true = 1,                                   sim = 500)"},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate simulation results — BEF_simulate_eval","title":"Evaluate simulation results — BEF_simulate_eval","text":"Evaluating GLS (CPR_GLS) INLA (CPR) results analyzing simulated data BEF_simulate. function evaluate type-/ type-II errors, slope estimates, AIC/wAIC, optimized lambda. Results simulation also provided.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate simulation results — BEF_simulate_eval","text":"","code":"BEF_simulate_eval(models, type = \"INLA\")"},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate simulation results — BEF_simulate_eval","text":"models list outputs CPR_GLS CPR type \"INLA\" \"GLS\". Defaulted \"INLA\"","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate simulation results — BEF_simulate_eval","text":"type = \"GLS\", AIC calculated. type = \"INLA\", wAIC calculated. function always evaluate proportion simulate runs producing statistically significant relationship (.e., p < 0.05). Thus whether represents type-error / power (1-type-II error) depend true b1 specified BEF_simulate.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate simulation results — BEF_simulate_eval","text":"summary_stat return proportion significant results, min max mean slope estimates across runs. result detailed results simulation run slope estimates X. AIC AIC (GLS) wAIC (INLA) model. function evaluates model optimized lambda, model without considering phylogeny, model user-supplied phylogenetic covariance matrix. optim_lambda Sumamry statistics optimized lambda. type INLA/GLS","code":""},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate simulation results — BEF_simulate_eval","text":"Toby P.N. Tsang","code":""},{"path":[]},{"path":"https://tpaknok.github.io/CPR/reference/BEF_simulate_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate simulation results — BEF_simulate_eval","text":"","code":"library(phytools) library(tidyverse) library(CPR) data(KSR) data(KSR_MLtree) data(KSR_EF)  VCV_sp <- vcv(KSR_MLtree)  ## simulation setup sim <- 20  #20 runs in total optim_sim <- 10 #optimizing lambda in ten runs only to minimize computational time optim_seq <- sample(c(rep(TRUE, optim_sim), rep(FALSE, sim-optim_sim)), sim ,replace = F)  sim_data_lambda_1 <- BEF_simulate(comm = KSR,                                   V = VCV_sp,                                   ef_mean = 0,                                   sd = 1,                                   b1 = 0,                                   signals_X = \"sr\",                                   signals_intercept = TRUE,                                   signals_slope = FALSE,                                   lambda_true = 1,                                   sim = sim)  INLA_formula <-  y~x+f(comm,model=\"generic0\",Cmatrix=Phylo) GLS_formula <- y~x ##  GLS_lambda_1 <- lapply(1:sim, function(x) CPR_GLS(formula = GLS_formula,                                                   df = sim_data_lambda_1$sim_dat[[x]],                                                   VCV_sp = VCV_sp,                                                   optim.lambda = optim_seq[[x]],                                                   comm = KSR))  INLA_lambda_1 <- lapply(1:sim, function(x) CPR(formula = INLA_formula,                                              priors=NULL,                                              df = sim_data_lambda_1$sim_dat[[x]],                                              VCV_sp = VCV_sp,                                              comm=KSR,                                              family= \"gaussian\",                                              inla.rerun=3,                                              optim.lambda = optim_seq[[x]]))  GLS_eval_lambda_1 <- BEF_simulate_eval(GLS_lambda_1,type=\"GLS\") INLA_eval_lambda_1 <- BEF_simulate_eval(INLA_lambda_1,type=\"INLA\")"},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":null,"dir":"Reference","previous_headings":"","what":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"Conducting Bayesian generalized linear mixed models community data using INLA.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"","code":"CPR(formula,     priors = NULL,     df,     VCV_sp,     comm,     family,     optim.lambda = TRUE,     original.VCV = TRUE,     optim.control = NULL,     control.compute = list(waic = TRUE, config = TRUE),     prediction.df = \"auto\",     predictedfittedresponse = \"best_m\",     inla.rerun = 1,     wAIC_threshold = -2,     ...)"},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"formula INLA formula. priors list containing priors random effect hyperparameters. NULL default priors used. See examples. fixed effect likelihood family, use control.fixed control.family argument (see inla documentation). df data frame response predictors VCV_sp phylogenetic covariance matrix species levels comm species site matrix family error distribution glmm. Defaulted \"gaussian\". Use inla.list.models(\"likelihood\") see distribution available. optim.lambda TRUE/FALSE. TRUE, function optimize (\\(\\lambda\\)). original.VCV TRUE/FALSE. TRUE, function build model based phylogenetic covariance matrix supplied user. optim.control additional arguments passing optim. control.compute arguments control.compute inla function. prediction.df model predictions. \"auto\", model provide predictions focal relatonship (e.g. ecosystem function biodiversity) holding covariates mean (continuous) mode (nominal) values. Users can also provide data frame ask INLA make model predictions. data frame must structure analyzed datset, users can define conditions different X setting response NA. predictedfittedresponse compute median posterior predictions best model (\"best_m\"), models phylogenetic covariance matrix supplied users (\"original_VCV\"), models without phylogenetic effect (\"no_phylo\"). results can passed createDHARMa. Defaulted \"best_m\". inla.rerun number times rerun INLA models ensure stable results. Defaulted 1. wAIC_threshold Selecting non-phylogenetic model including phylogeny improve wAIC threshold (.e, \\(wAIC_{optimized/original} - wAIC_{without\\_phylogeny} > threshold\\)). Defaulted -2. ... additional arguments passing inla","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"specifying random effect, use Cmatrix = Phylo indicate phylogenetic covariance communities, comm identity community. See examples. need create data frame. CPR automatically create internal environment. model always compare wAIC model without considering phylogeny model optimized (\\(\\lambda\\)). model without phylogeny selected \"best model\" wAIC reduce 2 (threshold can changed wAIC_threshold argument) including optimized/original \\(\\lambda\\), means $$wAIC_{optimized/original} - wAIC_{without\\_phylogeny} > -2$$ Note even optimized (\\(\\lambda\\)) = 0, model equivalent linear regression, covariance matrices still consider species overlap communities. Therefore, -diagnoals glmm still zeroes. Use inla.list.models(\"prior\") see priors available. Note name prior contain \"Phylo\".","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"best_model INLA output best model best_model_name model identified \"best\". predictedfittedresponse median posterior predictions wAIC wAIC models (without phylogeny, user supplied phylogenetic covariance matrix, optimized phylogeny). R2 R-squared calculated correlations observed responses mean posterior predictions optim_lambda value optimized \\(\\lambda\\). initial_formula initial formula provided users. without_phylo_model results fixed effects model without phylogeny. optimized_model results fixed effects model optimizing phylogeny. original_VCV_model results fixed effects model based covariance matrix provided users. Cmatrix phylogentic matrix optimization model. Note precision matrix instead covariance matrix fulfill requirement INLA prediction predictted values new data.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"Toby P.N. Tsang","code":""},{"path":[]},{"path":"https://tpaknok.github.io/CPR/reference/CPR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phylogenetic bayesian generalized linear mixed models for community data — CPR","text":"","code":"library(phytools) library(tidyverse) library(CPR) data(KSR) data(KSR_MLtree) data(KSR_EF)  VCV_sp <- vcv(KSR_MLtree)   inla_m <- CPR(formula = bugs~Real.rich+f(comm,model=\"generic0\",Cmatrix=Phylo),               priors=NULL,               df = KSR_EF,               VCV_sp = VCV_sp,               comm=KSR,               family=\"nbinomial\",               optim.lambda = T)  summary(inla_m$best_model) inla_m$prediction #see predicted relationships at each unique value of the a covariate, while holding others at the mean value. inla_m$wAIC #wAIC of different models. Note that wAIC_optim has the lowest wAIC.  # Advanced prior specification  prior.fixed <- list(prec.intercept = 0.001,prec = 0.005) prior.family <-  list(hyper=list(theta1 = list(prior=\"loggamma\",param = c(1,4e-5)))) prior.phy <- list(prec=list(prior=\"loggamma\",param=c(0.1,0.1))) prior.block <- list(prec=list(prior=\"loggamma\",param=c(1,4e-5)))  inla_m2 <- CPR(formula = LAI~Real.rich+                  f(comm,model=\"generic0\",Cmatrix=Phylo,hyper=prior.Phylo)+                  f(block,model=\"iid\"),               priors=list(prior.Phylo=prior.phy,prior.block=prior.block),               df = KSR_EF,               VCV_sp = VCV_sp,               comm=KSR,               family=\"gaussian\",               optim.lambda = T,               control.fixed = prior.fixed,               control.family = prior.family)"},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized least squares regression for community data. — CPR_GLS","title":"Generalized least squares regression for community data. — CPR_GLS","text":"function conducts GLS community-level data. recommended pglmm can better control type-error, power, slope estimates. However, analyses (e.g., piecewiseSEMs), INLA supported yet, compromise use GLS.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized least squares regression for community data. — CPR_GLS","text":"","code":"CPR_GLS(formula,         df,         VCV_sp,         comm,         optim.lambda = TRUE,         original.VCV = TRUE,         ...)"},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized least squares regression for community data. — CPR_GLS","text":"formula gls formula. df data frame. VCV_sp covariance matrix species levels. comm species-site matrix. optim.lambda TRUE/FALSE. TRUE optimial lambda model also returned. original.VCV TRUE/FALSE. TRUE model using supplied VCV_sp also returned. ... arguments passing optim.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized least squares regression for community data. — CPR_GLS","text":"function calls gls nlme conduct gls, automatically calculate covariance matrix communities using get_comm_pair_r.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized least squares regression for community data. — CPR_GLS","text":"without_phylo_model model without considering phylogeny (.e., equivalent OLS regression). optimized_model model optimized \\(\\lambda\\). original_VCV_model model based phylogenetic covariance matrix provided users (.e., without optimization). AIC AIC model. optim_lambda optimized \\(\\lambda\\) (.e., \\(\\lambda\\) leading lowest AIC).","code":""},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized least squares regression for community data. — CPR_GLS","text":"Toby P.N. Tsang","code":""},{"path":[]},{"path":"https://tpaknok.github.io/CPR/reference/CPR_GLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized least squares regression for community data. — CPR_GLS","text":"","code":"library(phytools) library(tidyverse) library(CPR) data(KSR) data(KSR_MLtree) data(KSR_EF)  VCV_sp <- vcv(KSR_MLtree)   GLS_lambda_1 <- CPR_GLS(formula = LAI~Real.rich,                         df = KSR_EF,                         VCV_sp = VCV_sp,                         optim.lambda = TRUE,                         comm = KSR)  GLS_lambda_1$without_phylo_model #models without considering phylogeny GLS_lambda_1$optimized_model #models without considering phylogeny GLS_lambda_1$original_VCV_model #models without considering phylogeny GLS_lambda_1$AIC #AIC of different models GLS_lambda_1$optim_lambda #optimized lambda if available"},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulating responses from INLA models — INLA_simulate","title":"Simulating responses from INLA models — INLA_simulate","text":"Model diagnostics using DHARMa require simulated responses (see createDHARMa). function automatically simulate responses INLA model. Currently support models gaussian, poisson, binomial, negative binomial (type 0), tweedie, zero-inflated negative binomial (type 1) model.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulating responses from INLA models — INLA_simulate","text":"","code":"INLA_simulate(object,               nsim = 250,               Ntrails = NULL)"},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulating responses from INLA models — INLA_simulate","text":"object INLA CPR output (e.g. m$best_model) nsim Number simulations Ntrails number trials binomial likelihood. match input argument Ntrials inla. Defaulted 1.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulating responses from INLA models — INLA_simulate","text":"simulated response can passed createDHARMa, creating DHARMa object diagnostic.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulating responses from INLA models — INLA_simulate","text":"data frame containing simulated responses, column representing simulation run.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulating responses from INLA models — INLA_simulate","text":"Toby P.N. Tsang","code":""},{"path":[]},{"path":"https://tpaknok.github.io/CPR/reference/INLA_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulating responses from INLA models — INLA_simulate","text":"","code":"library(phytools) library(tidyverse) library(CPR) data(\"KSR\") data(\"KSR_MLtree\") data(\"KSR_EF\")  VCV_sp <- vcv(KSR_MLtree) #species level phyologenetic covariance matrix using default (Brownian) model VCV_sp <- VCV_sp[order(rownames(VCV_sp)),order(colnames(VCV_sp))]  inla_m <- CPR(formula = bugs~Real.rich+f(comm,model=\"generic0\",Cmatrix=Phylo),               priors=NULL,               df = KSR_EF,               VCV_sp = VCV_sp,               comm=KSR,               family=\"nbinomial\",               optim.lambda = T)  library(DHARMa) sres <- INLA_simulate(inla_m$best_model) DHARMa_res <- createDHARMa(sres,                            KSR_EF$bugs,                            fittedPredictedResponse=inla_m$predictedfittedresponse,                            integerResponse = T) plot(DHARMa_res,quantreg=F)"},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"Getting pairwise phylogenetic correlation communities","code":""},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"","code":"get_comm_pair_r(comm,V,force.PD = TRUE)"},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"comm species-site matrix V phylogenetic covariance matrix species levels force.PD find closest positive definite matrix community levels.   Default TRUE. Note matrix positive definite subsequent analyses can fail.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"resulting phylogenetic correlation matrix based additive law covariance. Imagine two communities species (X,Y) species (X,Z). Covariance community levels $$Cov(X+Y,X+Z) = Var(X)+Cov(X,Z)+Cov(X,Y)+Cov(Y,Z)$$ components can obtained species level phylogenetic matrix.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"phylogenetic correlation matrix community levels.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"Toby P.N. Tsang","code":""},{"path":"https://tpaknok.github.io/CPR/reference/get_comm_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting pairwise phylogenetic correlation between communities — get_comm_pair_r","text":"","code":"library(phytools) library(tidyverse) library(CPR) data(KSR) data(KSR_MLtree) data(KSR_EF)  KSR_MLtree <- keep.tip(KSR_MLtree,colnames(KSR)) VCV_sp <- vcv(KSR_MLtree) #species level phyologenetic covariance matrix using default (Brownian) model VCV_comm <- get_comm_pair_r(KSR,VCV_sp)"},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.INLA.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for INLA models — likelihood.lambda.INLA","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for INLA models — likelihood.lambda.INLA","text":"internal function called CPR. used optim, function compares wAIC models different \\(\\lambda\\) identify best one using L-BFGS-B.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.INLA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for INLA models — likelihood.lambda.INLA","text":"","code":"likelihood.lambda.INLA(inla_formula,                        data,                        family = \"gaussian\",                        VCV_sp = NULL,                        comm = NULL,                        lambda,                        priors = NULL,                        ...)"},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.INLA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for INLA models — likelihood.lambda.INLA","text":"inla_formula INLA formula data data frame family error distribution (e.g., \"gaussian\",\"poisson\"). See INLA package distribution available. VCV_sp phylogenetic covariance matrix species levels. comm species-site matrix. lambda initial lambda ranging 0.2 0.8/ priors priors used INLA model ... additional arguments passing optim","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.INLA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for INLA models — likelihood.lambda.INLA","text":"initial value randomized 0.2 0.8, results capped 0 1. function start extremes avoid L-BFGS-B terminating prematurely.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.INLA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for INLA models — likelihood.lambda.INLA","text":"Toby P.N. Tsang","code":""},{"path":[]},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","text":"internal function called CPR_GLS. used optim, function compares AIC models different \\(\\lambda\\) identify best one using L-BFGS-B.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","text":"","code":"likelihood.lambda(lambda,   formula,   df,   VCV_sp,   comm,   ...)"},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","text":"lambda initial lambda. CPR_GLS default randomly select value 0.2-0.8 formula formula GLS df data frame VCV_sp phylogenetic covariance matrix species levels comm species-site matrix ... additional arguments passing optim.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","text":"initial value randomized 0.2 0.8, results capped 0 1. function start extremes avoid L-BFGS-B terminating prematurely.","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","text":"returning (\\(\\lambda\\)) leading lowest AIC","code":""},{"path":"https://tpaknok.github.io/CPR/reference/likelihood.lambda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimizing phylogenetic signals (\\(\\lambda\\)) at community levels for GLS — likelihood.lambda","text":"Toby P. N. Tsang","code":""},{"path":[]}]
